# ====================================================================
# Data Pipeline POC - Configuration Environment
# ====================================================================
# 
# Ce fichier contient toutes les variables d'environnement nécessaires
# pour le bon fonctionnement du Data Pipeline.
#
# IMPORTANT: Renommez ce fichier en '.env' avant utilisation
# 
# ====================================================================

# --------------------------------------------------------------------
# MinIO Configuration (Stockage S3)
# --------------------------------------------------------------------
# MinIO est utilisé comme stockage objet compatible S3
# Console Web: http://localhost:9001
# API S3: http://localhost:9000

MINIO_ROOT_USER=admin
MINIO_ROOT_PASSWORD=password123

# Note: Pour la production, utilisez des credentials plus sécurisés
# Exemple: MINIO_ROOT_PASSWORD=$(openssl rand -base64 32)


# --------------------------------------------------------------------
# PostgreSQL / TimescaleDB Configuration
# --------------------------------------------------------------------
# TimescaleDB est utilisé pour le stockage des séries temporelles
# Connexion: postgresql://postgres:postgres123@localhost:5433/datamart

POSTGRES_DB=datamart
POSTGRES_USER=postgres
POSTGRES_PASSWORD=postgres123

# Note: Pour la production, utilisez un mot de passe fort


# --------------------------------------------------------------------
# Spark Configuration (Optionnel)
# --------------------------------------------------------------------
# Ces variables sont utilisées par Spark pour se connecter à MinIO
# Elles sont déjà configurées dans docker-compose.yml mais peuvent
# être surchargées ici si nécessaire

# AWS_ACCESS_KEY_ID=${MINIO_ROOT_USER}
# AWS_SECRET_ACCESS_KEY=${MINIO_ROOT_PASSWORD}
# AWS_REGION=us-east-1
# AWS_S3_FORCE_PATH_STYLE=true


# --------------------------------------------------------------------
# dbt Configuration (Optionnel)
# --------------------------------------------------------------------
# Configuration pour dbt - normalement géré via profiles.yml
# mais peut être surchargé ici si nécessaire

# DBT_PROFILES_DIR=/root/.dbt
# DBT_TARGET=dev


# --------------------------------------------------------------------
# Jupyter Configuration (Optionnel)
# --------------------------------------------------------------------
# Par défaut, Jupyter est accessible sans mot de passe
# Décommentez et configurez ces variables pour activer l'authentification

# JUPYTER_ENABLE_LAB=yes
# JUPYTER_TOKEN=votre-token-securise-ici


# --------------------------------------------------------------------
# Application Configuration (Optionnel)
# --------------------------------------------------------------------
# Variables pour l'application ou scripts personnalisés

# APP_ENV=development
# LOG_LEVEL=INFO
# DATA_REFRESH_INTERVAL=3600


# ====================================================================
# Notes de Sécurité
# ====================================================================
#
# 1. NE JAMAIS commiter le fichier .env dans Git
#    → Ajoutez .env dans .gitignore
#
# 2. Pour la production, utilisez des secrets managés:
#    - Docker Secrets
#    - HashiCorp Vault
#    - AWS Secrets Manager
#    - Azure Key Vault
#
# 3. Rotation régulière des mots de passe
#
# 4. Utilisez des mots de passe forts:
#    - Minimum 16 caractères
#    - Lettres, chiffres, caractères spéciaux
#    - Générés aléatoirement
#
# ====================================================================


# ====================================================================
# Génération de Mots de Passe Sécurisés
# ====================================================================
#
# PowerShell (Windows):
# -SecureString $([char[]](Get-Random -InputObject (48..57 + 65..90 + 97..122) -Count 32) -join '')
#
# Bash (Linux/Mac):
# openssl rand -base64 32
#
# ====================================================================
